// Code generated by MockGen. DO NOT EDIT.
// Source: database/databaseInterface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	database "CurrencyChecking/database"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDbInterface is a mock of DbInterface interface.
type MockDbInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDbInterfaceMockRecorder
}

// MockDbInterfaceMockRecorder is the mock recorder for MockDbInterface.
type MockDbInterfaceMockRecorder struct {
	mock *MockDbInterface
}

// NewMockDbInterface creates a new mock instance.
func NewMockDbInterface(ctrl *gomock.Controller) *MockDbInterface {
	mock := &MockDbInterface{ctrl: ctrl}
	mock.recorder = &MockDbInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbInterface) EXPECT() *MockDbInterfaceMockRecorder {
	return m.recorder
}

// InsertUser mocks base method.
func (m *MockDbInterface) InsertUser(user database.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockDbInterfaceMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDbInterface)(nil).InsertUser), user)
}

// SelectUsersEmail mocks base method.
func (m *MockDbInterface) SelectUsersEmail() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsersEmail")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsersEmail indicates an expected call of SelectUsersEmail.
func (mr *MockDbInterfaceMockRecorder) SelectUsersEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsersEmail", reflect.TypeOf((*MockDbInterface)(nil).SelectUsersEmail))
}
